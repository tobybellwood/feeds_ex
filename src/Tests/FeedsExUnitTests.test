<?php

/**
 * @file
 * Contains unit tests for feeds_ex.
 */

/**
 * Base class for units tests.
 */
abstract class FeedsExUnitTestBase extends DrupalUnitTestCase {

  /**
   * The module directory.
   *
   * @var string
   */
  protected $moduleDir;

  public function setUp() {
    parent::setUp();

    // Isn't this fun!
    drupal_load('module', 'feeds');
    $feeds = DRUPAL_ROOT . '/' . drupal_get_path('module', 'feeds');
    require_once $feeds . '/includes/FeedsConfigurable.inc';
    require_once $feeds . '/includes/FeedsSource.inc';
    require_once $feeds . '/includes/FeedsImporter.inc';
    require_once $feeds . '/plugins/FeedsPlugin.inc';
    require_once $feeds . '/plugins/FeedsFetcher.inc';
    require_once $feeds . '/plugins/FeedsFileFetcher.inc';
    require_once $feeds . '/plugins/FeedsParser.inc';
    require_once $feeds . '/plugins/FeedsProcessor.inc';
    require_once $feeds . '/plugins/FeedsNodeProcessor.inc';

    drupal_load('module', 'feeds_ex');
    $this->moduleDir = DRUPAL_ROOT . '/' . drupal_get_path('module', 'feeds_ex');
    require_once $this->moduleDir . '/src/FeedsExBase.inc';
  }

  /**
   * Returns a mocked FeedsSource object.
   *
   * @param string $fetcher
   *   (optional) The fetcher class. Defaults to FeedsFileFetcher
   * @param string $processor
   *   (optional) The processor class. Defaults to FeedsNodeProcessor.
   *
   * @return FeedsSource
   *   The mocked FeedsSource object,
   */
  protected function getMockFeedsSource($fetcher = 'FeedsFileFetcher', $processor = 'FeedsNodeProcessor') {
    $importer = $this->createInstanceWithoutConstructor('FeedsImporter');

    $fetcher = $this->createInstanceWithoutConstructor($fetcher);
    $this->setProtectedValue($importer, 'fetcher', $fetcher);

    $processor = $this->createInstanceWithoutConstructor($processor);
    $this->setProtectedValue($importer, 'processor', $processor);

    $source = $this->createInstanceWithoutConstructor('FeedsSource');
    $this->setProtectedValue($source, 'importer', $importer);

    return $source;
  }

  /**
   * Creates a class without calling its constructor.
   *
   * @param string $class
   *   The class instance to create.
   *
   * @return object
   *   An instance of the class.
   */
  protected function createInstanceWithoutConstructor($class) {
    $reflector = new ReflectionClass($class);
    $properties = $reflector->getProperties();
    $defaults = $reflector->getDefaultProperties();

    $serialized = 'O:' . strlen($class) . ":\"$class\":" . count($properties) . ':{';
    foreach ($properties as $property) {
      $name = $property->getName();
      if ($property->isProtected()) {
        $name = chr(0) . '*' . chr(0) . $name;
      }
      elseif ($property->isPrivate()) {
        $name = chr(0)  . $class .  chr(0) . $name;
      }

      $serialized .= serialize($name);

      if (array_key_exists($property->getName(), $defaults)) {
        $serialized .= serialize($defaults[$property->getName()]);
      }
      else {
        $serialized .= serialize(NULL);
      }
    }
    $serialized .= '}';

    return unserialize($serialized);
  }

  /**
   * Sets a protected or private property of an object.
   *
   * @param object $object
   *   The object to set the property.
   * @param string $property
   *   The name of the property.
   * @param mixed $value
   *   The value of the property.
   */
  protected function setProtectedValue($object, $property, $value) {
    $reflector = new ReflectionObject($object);
    $property = $reflector->getProperty($property);
    $property->setAccessible(TRUE);
    $property->setValue($object, $value);
  }

}

/**
 * Tests stripping default namespaces.
 */
class FeedsExRemoveDefaultNamespaces extends DrupalUnitTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Strip default namespaces',
      'description' => 'Tests stripping default namespaces from XML.',
      'group' => 'Feeds EX',
    );
  }

  public function setUp() {
    parent::setUp();
    drupal_load('module', 'feeds_ex');
  }

  /**
   * Strip some namespaces out of XML.
   */
  public function test() {
    $this->check('<feed xmlns="http://www.w3.org/2005/Atom">bleep blorp</feed>', '<feed>bleep blorp</feed>');
    $this->check('<подача xmlns="http://www.w3.org/2005/Atom">bleep blorp</подача>', '<подача>bleep blorp</подача>');
    $this->check('<по.дача xmlns="http://www.w3.org/2005/Atom">bleep blorp</по.дача>', '<по.дача>bleep blorp</по.дача>');
    $this->check('<element other attrs xmlns="http://www.w3.org/2005/Atom">bleep blorp</element>', '<element other attrs>bleep blorp</element>');
    $this->check('<cat xmlns="http://www.w3.org/2005/Atom" other attrs>bleep blorp</cat>', '<cat other attrs>bleep blorp</cat>');
    $this->check('<飼料 thing="stuff" xmlns="http://www.w3.org/2005/Atom">bleep blorp</飼料>', '<飼料 thing="stuff">bleep blorp</飼料>');
    $this->check('<飼-料 thing="stuff" xmlns="http://www.w3.org/2005/Atom">bleep blorp</飼-料>', '<飼-料 thing="stuff">bleep blorp</飼-料>');
    $this->check('<self xmlns="http://www.w3.org/2005/Atom" />', '<self />');
    $this->check('<self attr xmlns="http://www.w3.org/2005/Atom"/>', '<self attr/>');
    $this->check('<a xmlns="http://www.w3.org/2005/Atom"/>', '<a/>');
    $this->check('<a xmlns="http://www.w3.org/2005/Atom"></a>', '<a></a>');
    $this->check('<a href="http://google.com" xmlns="http://www.w3.org/2005/Atom"></a>', '<a href="http://google.com"></a>');

    // Test invalid XML element names.
    $this->check('<1name href="http://google.com" xmlns="http://www.w3.org/2005/Atom"></1name>', '<1name href="http://google.com" xmlns="http://www.w3.org/2005/Atom"></1name>');

    // Test other namespaces.
    $this->check('<name href="http://google.com" xmlns:h="http://www.w3.org/2005/Atom"></name>', '<name href="http://google.com" xmlns:h="http://www.w3.org/2005/Atom"></name>');

    // Test multiple default namespaces.
    $this->check('<name xmlns="http://www.w3.org/2005/Atom"></name><name xmlns="http://www.w3.org/2005/Atom"></name>', '<name></name><name></name>');
  }

  /**
   * Checks that the input and output are equal.
   */
  protected function check($in, $out) {
    $this->assertEqual(feeds_ex_remove_default_namespaces($in), $out);
  }

}
