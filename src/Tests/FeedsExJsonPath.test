<?php

/**
 * @file
 * Contains tests for FeedsExJsonPath.
 */

/**
 * Unit tests for FeedsExJsonPath.
 */
class FeedsExJsonPathUnitTests extends FeedsExUnitTestBase {

  /**
   * The mocked FeedsSource.
   *
   * @var FeedsSource
   */
  protected $source;

  public static function getInfo() {
    return array(
      'name' => 'JSONPath parser unit tests',
      'description' => 'Unit tests for FeedsExJsonPath.',
      'group' => 'Feeds EX',
    );
  }

  public function setUp() {
    parent::setUp();

    require_once $this->moduleDir . '/src/FeedsExJsonPath.inc';

    $this->source = $this->getMockFeedsSource();
    $this->downloadExtractJsonPath();
  }

  /**
   * Tests simple parsing.
   */
  public function testSimpleParsing() {
    $parser = FeedsConfigurable::instance('FeedsExJsonPath', 'test_parser');
    $fetcher_result = new FeedsFetcherResult(file_get_contents($this->moduleDir . '/tests/resources/test.json'));

    $parser->setConfig(array(
      'context' => array(
        'value' => '$.items.*',
      ),
      'sources' => array(
        'title' => array(
          'name' => 'Title',
          'value' => 'title',
        ),
        'description' => array(
          'name' => 'Title',
          'value' => 'description',
        ),
      ),
    ));

    $result = $parser->parse($this->source, $fetcher_result);

    $this->assertEqual(count($result->items), 3, format_string('@count items parsed.', array('@count' => count($result->items))));

    foreach ($result->items as $delta => $item) {
      $this->assertEqual('I am a title' . $delta, $item['title']);
      $this->assertEqual('I am a description' . $delta, $item['description']);
    }
  }

  /**
   * Tests parsing error handling.
   */
  public function testErrorHandling() {
    // Parse some invalid JSON.
    json_decode('\\"asdfasfd');

    $parser = FeedsConfigurable::instance('FeedsExJsonPath', 'test_parser');
    $errors = $this->invokeMethod($parser, 'getErrors');
    $this->assertEqual(3, $errors[0]['severity']);
  }

  /**
   * Downloads and extracts JSONPath.
   */
  protected function downloadExtractJsonPath() {
    if (defined('FEEDS_EX_LIBRARY_PATH')) {
      return;
    }
    $url = 'https://jsonpath.googlecode.com/svn/trunk/src/php/jsonpath.php';
    $filename = 'jsonpath.php';

    // Avoid downloading the file dozens of times.
    $library_dir = $this->originalFileDirectory . '/simpletest/feeds_ex';
    $jsonpath_library_dir = DRUPAL_ROOT . '/' . $library_dir . '/jsonpath';

    if (!file_exists(DRUPAL_ROOT . '/' . $library_dir)) {
      drupal_mkdir(DRUPAL_ROOT . '/' . $library_dir);
    }

    if (!file_exists($jsonpath_library_dir)) {
      drupal_mkdir($jsonpath_library_dir);
    }

    // Local file name.
    $local_file = $jsonpath_library_dir . '/' . $filename;

    // Begin single threaded code.
    if (function_exists('sem_get')) {
      $semaphore = sem_get(ftok(__FILE__, 1));
      sem_acquire($semaphore);
    }

    // Download and extact the archive, but only in one thread.
    if (!file_exists($local_file)) {
      $local_file = system_retrieve_file($url, $local_file, FALSE, FILE_EXISTS_REPLACE);
    }

    if (function_exists('sem_get')) {
      sem_release($semaphore);
    }

    // Verify that files were successfully extracted.
    $this->assertTrue(file_exists($local_file), format_string('@file found.', array('@file' => $local_file)));

    // Set the library directory.
    define('FEEDS_EX_LIBRARY_PATH', $library_dir);
  }

}
